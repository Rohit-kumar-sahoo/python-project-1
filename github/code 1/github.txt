from decimal import Decimal, getcontext, ROUND_HALF_UP

# Set precision for financial calculations
getcontext().prec = 10

class LoanCalculator:
    def __init__(self, principal, annual_rate, years):
        self.principal = Decimal(str(principal))
        self.annual_rate = Decimal(str(annual_rate))
        self.years = int(years)
        self.monthly_rate = self.annual_rate / Decimal('12')
        self.total_payments = self.years * 12

    def calculate_monthly_payment(self):
        if self.annual_rate == 0:
            return (self.principal / Decimal(str(self.total_payments))).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        r = self.monthly_rate
        n = Decimal(str(self.total_payments))
        factor = (Decimal('1') + r) ** n
        monthly_payment = self.principal * (r * factor) / (factor - Decimal('1'))
        return monthly_payment.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)

    def generate_amortization_schedule(self, months=12):
        monthly_payment = self.calculate_monthly_payment()
        balance = self.principal
        schedule = []

        for payment_num in range(1, min(months + 1, self.total_payments + 1)):
            interest_payment = (balance * self.monthly_rate).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            principal_payment = monthly_payment - interest_payment
            balance -= principal_payment

            schedule.append({
                'payment': payment_num,
                'monthly_payment': monthly_payment,
                'interest': interest_payment,
                'principal': principal_payment,
                'balance': balance.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            })

        return schedule

    def total_interest_paid(self):
        monthly_payment = self.calculate_monthly_payment()
        total_paid = monthly_payment * Decimal(str(self.total_payments))
        return (total_paid - self.principal).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)

def get_valid_input(prompt, cast_type=float):
    while True:
        try:
            value = cast_type(input(prompt))
            if value < 0:
                raise ValueError
            return value
        except ValueError:
            print("Invalid input. Please enter a positive number.")

def main():
    print("=== Loan Calculator Application ===")

    while True:
        print("\nChoose an option:")
        print("1. Calculate a new loan")
        print("2. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            principal = get_valid_input("Enter loan amount: ")
            rate = get_valid_input("Enter annual interest rate (e.g., 4.5 for 4.5%): ") / 100
            years = get_valid_input("Enter loan term in years: ", int)
            description = input("Enter a description for this loan: ")

            calc = LoanCalculator(principal, rate, years)
            monthly = calc.calculate_monthly_payment()
            total_interest = calc.total_interest_paid()

            print(f"\n{description}")
            print("-" * 50)
            print(f"Loan Amount: ${calc.principal:,}")
            print(f"Monthly Payment: ${monthly}")
            print(f"Total Interest: ${total_interest:,}")
            print(f"Total Cost: ${calc.principal + total_interest:,}")

            schedule = calc.generate_amortization_schedule(months=12)
            print("\nFirst 12 Payments:")
            print(f"{'Pmt':<5} {'Payment':<12} {'Interest':<10} {'Principal':<10} {'Balance':<12}")
            print("-" * 50)
            for payment in schedule:
                print(f"{payment['payment']:<5} "
                      f"${payment['monthly_payment']:<11} "
                      f"${payment['interest']:<9} "
                      f"${payment['principal']:<9} "
                      f"${payment['balance']:<11}")

        elif choice == '2':
            print("Thank you for using the Loan Calculator. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()